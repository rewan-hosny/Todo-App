{"version":3,"sources":["todo.service.ts"],"names":["core_1","require","http_1","rxjs_1","TodoService","http","this","baseUrl","prototype","getMyTodoList","token","localStorage","getItem","httpOptions","headers","HttpHeaders","Authorization","get","addTodoItem","todoItem","Content-Type","post","pipe","catchError","error","console","log","errors","throwError","updateTodo","id","patch","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,wBAGAE,OAAAF,QAAA,QAKAG,YAAA,WAEE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EADdC,KAAAC,QAAU,8BA2ClB,OAzCEH,EAAAI,UAAAC,cAAA,WACA,IAAMC,EAAQC,aAAaC,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAIZ,OAAAa,YAAY,CACvBC,cAAiB,UAAUN,KAI/B,OAAOJ,KAAKD,KAAKY,IAAOX,KAAKC,QAAO,eAAgBM,IAItDT,EAAAI,UAAAU,YAAA,SAAYC,GACR,IAAMT,EAAQC,aAAaC,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAIZ,OAAAa,YAAY,CACvBC,cAAiB,UAAUN,EAC3BU,eAAgB,sBAGpB,OAAOd,KAAKD,KAAKgB,KAAaf,KAAKC,QAAO,eAAgBY,EAAUN,GAC/DS,KAAKnB,OAAAoB,WAAW,SAACC,GAEd,OADAC,QAAQC,IAAIF,EAAMG,QACXxB,OAAAyB,WAAWJ,OAK5BpB,EAAAI,UAAAqB,WAAA,SAAWC,EAAWX,GACd,IAAMT,EAAQC,aAAaC,QAAQ,iBACnCC,EAAc,CAClBC,QAAS,IAAIZ,OAAAa,YAAY,CACvBC,cAAiB,UAAUN,EAC3BU,eAAgB,sBAGpB,OAAOd,KAAKD,KAAK0B,MACbzB,KAAKC,QAAO,gBAAgBuB,EAC9BX,EAASN,IAzCFT,EAAW4B,WAAA,CAHvBhC,OAAAiC,WAAW,CACVC,WAAY,UAED9B,GAAb,GAAa+B,QAAA/B,YAAAA","file":"todo.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Todo } from 'src/app/Todo';\nimport { catchError, throwError } from 'rxjs';\nimport { EditTodo } from 'src/app/EditTodo';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\nprivate baseUrl = 'https://localhost:7101/api/';\n  constructor(private http: HttpClient) { }\n  getMyTodoList() {\n  const token = localStorage.getItem('Authorization');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    })\n  };\n   \n  return this.http.get(`${this.baseUrl}Todo/mytodos`, httpOptions);\n  }\n\n  \naddTodoItem(todoItem: Todo): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post<any>(`${this.baseUrl}Todo/mytodos`, todoItem, httpOptions)\n        .pipe(catchError((error: any) => {\n            console.log(error.errors);\n            return throwError(error);\n        }));\n}\n\n  \n  updateTodo(id: number,todoItem: EditTodo): Observable<EditTodo[]> {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.patch<EditTodo[]>(\n     `${this.baseUrl}Todo/mytodos/${id}`,\n      todoItem,httpOptions\n    );\n    }\n}\n"]}