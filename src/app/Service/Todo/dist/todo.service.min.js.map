{"version":3,"sources":["todo.service.ts"],"names":["core_1","require","http_1","rxjs_1","TodoService","http","this","baseUrl","prototype","getMyTodoList","isCompleted","token","localStorage","getItem","url","httpOptions","headers","HttpHeaders","Authorization","get","addTodoItem","todoItem","Content-Type","post","pipe","catchError","error","console","log","errors","throwError","updateTodo","id","patch","DeleteTodo","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,wBAGAE,OAAAF,QAAA,QAKAG,YAAA,WAEE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EADdC,KAAAC,QAAU,8BA+DlB,OA5DAH,EAAAI,UAAAC,cAAA,SAAcC,QAAA,IAAAA,IAAAA,EAAA,MACZ,IAAMC,EAAQC,aAAaC,QAAQ,iBAC/BC,EAASR,KAAKC,QAAO,eAGL,OAAhBG,IACFI,GAAO,gBAAgBJ,GAGzB,IAAMK,EAAc,CAClBC,QAAS,IAAId,OAAAe,YAAY,CACvBC,cAAiB,UAAUP,KAI/B,OAAOL,KAAKD,KAAKc,IAAIL,EAAKC,IAG5BX,EAAAI,UAAAY,YAAA,SAAYC,GACR,IAAMV,EAAQC,aAAaC,QAAQ,iBAC7BE,EAAc,CAClBC,QAAS,IAAId,OAAAe,YAAY,CACvBC,cAAiB,UAAUP,EAC3BW,eAAgB,sBAGpB,OAAOhB,KAAKD,KAAKkB,KAAajB,KAAKC,QAAO,eAAgBc,EAAUN,GAC/DS,KAAKrB,OAAAsB,WAAW,SAACC,GAEd,OADAC,QAAQC,IAAIF,EAAMG,QACX1B,OAAA2B,WAAWJ,OAK5BtB,EAAAI,UAAAuB,WAAA,SAAWC,EAAWX,GACd,IAAMV,EAAQC,aAAaC,QAAQ,iBACnCE,EAAc,CAClBC,QAAS,IAAId,OAAAe,YAAY,CACvBC,cAAiB,UAAUP,EAC3BW,eAAgB,sBAGpB,OAAOhB,KAAKD,KAAK4B,MACb3B,KAAKC,QAAO,gBAAgByB,EAC9BX,EAASN,IAGXX,EAAAI,UAAA0B,WAAA,SAAWF,GACL,IAAMrB,EAAQC,aAAaC,QAAQ,iBACnCE,EAAc,CAClBC,QAAS,IAAId,OAAAe,YAAY,CACvBC,cAAiB,UAAUP,EAC3BW,eAAgB,sBAGpB,OAAOhB,KAAKD,KAAW,OACnBC,KAAKC,QAAO,gBAAgByB,EAC/BjB,IA7DQX,EAAW+B,WAAA,CAHvBnC,OAAAoC,WAAW,CACVC,WAAY,UAEDjC,GAAb,GAAakC,QAAAlC,YAAAA","file":"todo.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Todo } from 'src/app/Todo';\nimport { catchError, throwError } from 'rxjs';\nimport { EditTodo } from 'src/app/EditTodo';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\nprivate baseUrl = 'https://localhost:7101/api/';\n  constructor(private http: HttpClient) { }\n  \ngetMyTodoList(isCompleted: boolean | null = null) {\n  const token = localStorage.getItem('Authorization');\n  let url = `${this.baseUrl}Todo/mytodos`;\n\n  // If isCompleted is provided, add it as a query parameter to the URL\n  if (isCompleted !== null) {\n    url += `?isCompleted=${isCompleted}`;\n  }\n\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    })\n  };\n   \n  return this.http.get(url, httpOptions);\n}\n\naddTodoItem(todoItem: Todo): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post<any>(`${this.baseUrl}Todo/mytodos`, todoItem, httpOptions)\n        .pipe(catchError((error: any) => {\n            console.log(error.errors);\n            return throwError(error);\n        }));\n}\n\n  \n  updateTodo(id: number,todoItem: EditTodo): Observable<EditTodo[]> {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.patch<EditTodo[]>(\n     `${this.baseUrl}Todo/mytodos/${id}`,\n      todoItem,httpOptions\n    );\n  }\n    DeleteTodo(id: number): Observable<any> {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.delete<any>(\n     `${this.baseUrl}Todo/mytodos/${id}`,\n     httpOptions\n    );\n    }\n}\n"]}