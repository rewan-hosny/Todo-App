{"version":3,"sources":["user-service.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAG3C,+BAA0B;AAQ1B;IAGE,qBAAoB,IAAgB,EAAU,SAA2B,EAAS,YAAiC,EAAU,MAAc;QAAvH,SAAI,GAAJ,IAAI,CAAY;QAAU,cAAS,GAAT,SAAS,CAAkB;QAAS,iBAAY,GAAZ,YAAY,CAAqB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAFrI,YAAO,GAAG,6BAA6B,CAAC;IAEgG,CAAC;IAE/I,8BAAQ,GAAR,UAAS,IAAS;QAChB,OAAO,kBAAK,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,kBAAe,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED,2BAAK,GAAL,UAAM,KAAa,EAAC,QAAgB;QAApC,iBAkBC;QAhBC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,uCAAuC,EACpD,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACpC,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;aACxB,SAAS,CAAC,UAAC,QAAQ;YAClB,IAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,IAAI,KAAK,EAAE;gBAEb,IAAM,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxD,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;gBAC9C,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,4DAA4D,CAAC,CAAC,CAAC;gBACnG,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,sEAAsE,CAAC,CAAC,CAAC;gBACzH,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACrC;QAEK,CAAC,CACA,CAAC;IACN,CAAC;IAED,qBAAqB;IACrB,yDAAyD;IACzD,0BAA0B;IAC1B,qCAAqC;IACrC,sDAAsD;IACtD,qBAAqB;IACrB,SAAS;IACT,uBAAuB;IACvB,wCAAwC;IACxC,QAAQ;IACR,IAAI;IACN,qCAAe,GAAf;QACE,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAM,kBAAkB,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACxD,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;IAC5D,CAAC;IAGC,4BAAM,GAAN;QACE,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC1C,CAAC;IApDU,WAAW;QAHvB,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,WAAW,CAqDvB;IAAD,kBAAC;CArDD,AAqDC,IAAA;AArDY,kCAAW","file":"user-service.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport axios from 'axios';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\nprivate baseUrl = 'https://localhost:7101/api/';\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService,private localStorage: LocalStorageService, private router: Router) {}\n\n  register(user: any) {\n    return axios.post(`${this.baseUrl}Auth/register`, user);\n  }\n\n  login(email: string,password: string) {\n    \n    this.http.post('https://localhost:7101/api/Auth/login',\n      { email: email, password: password },\n      { responseType: 'text' })\n      .subscribe((response) => {\n        const token = response;\n        if (token) {\n    \n      const decodedToken = this.jwtHelper.decodeToken(token);\n     localStorage.setItem('Authorization', token);\n    localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n          localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n      this.router.navigate(['/todo']);\n}\n\n      },\n      );\n  }\n\n  // login(user: any) {\n  //   return axios.post(`${this.baseUrl}Auth/login`, user)\n  //     .then(response => {\n  //       const token = response.data;\n  //       localStorage.setItem('Authorization', token);\n  //       return true;\n  //     })\n  //    .catch(error => {\n  //     return error.response.data.error;\n  //   });\n  // }\nisAuthenticated(): boolean {\n  const token = localStorage.getItem('Authorization');\n  if (!token) {\n    return false;\n  }\n  const tokenWithoutBearer = token.replace('Bearer ', '');\n  return !this.jwtHelper.isTokenExpired(tokenWithoutBearer);\n}\n\n\n  logout() {\n    localStorage.removeItem('access_token');\n  }\n}\n"]}