{"version":3,"sources":["user-service.service.ts"],"names":["core_1","require","axios_1","UserService","http","jwtHelper","localStorage","router","this","baseUrl","prototype","register","user","post","login","email","password","_this","responseType","subscribe","response","token","decodedToken","decodeToken","setItem","navigate","isAuthenticated","getItem","tokenWithoutBearer","replace","isTokenExpired","logout","removeItem","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,QAAAD,QAAA,SAQAE,YAAA,WAGE,SAAAA,EAAoBC,EAA0BC,EAAoCC,EAA2CC,GAAzGC,KAAAJ,KAAAA,EAA0BI,KAAAH,UAAAA,EAAoCG,KAAAF,aAAAA,EAA2CE,KAAAD,OAAAA,EAFvHC,KAAAC,QAAU,8BAoDlB,OAhDEN,EAAAO,UAAAC,SAAA,SAASC,GACP,OAAOV,QAAA,QAAMW,KAAQL,KAAKC,QAAO,gBAAiBG,IAGpDT,EAAAO,UAAAI,MAAA,SAAMC,EAAcC,GAApB,IAAAC,EAAAT,KAEEA,KAAKJ,KAAKS,KAAK,wCACb,CAAEE,MAAOA,EAAOC,SAAUA,GAC1B,CAAEE,aAAc,SACfC,UAAU,SAACC,GACV,IAAMC,EAAQD,EACd,GAAIC,EAAO,CAEb,IAAMC,EAAeL,EAAKZ,UAAUkB,YAAYF,GACjDf,aAAakB,QAAQ,gBAAiBH,GACvCf,aAAakB,QAAQ,OAAQF,EAAa,+DACpChB,aAAakB,QAAQ,SAAUF,EAAa,yEAChDL,EAAKV,OAAOkB,SAAS,CAAC,cAkB5BtB,EAAAO,UAAAgB,gBAAA,WACE,IAAML,EAAQf,aAAaqB,QAAQ,iBACnC,IAAKN,EACH,OAAO,EAET,IAAMO,EAAqBP,EAAMQ,QAAQ,UAAW,IACpD,OAAQrB,KAAKH,UAAUyB,eAAeF,IAItCzB,EAAAO,UAAAqB,OAAA,WACEzB,aAAa0B,WAAW,iBAnDf7B,EAAW8B,WAAA,CAHvBjC,OAAAkC,WAAW,CACVC,WAAY,UAEDhC,GAAb,GAAaiC,QAAAjC,YAAAA","file":"user-service.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport axios from 'axios';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\nprivate baseUrl = 'https://localhost:7101/api/';\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService,private localStorage: LocalStorageService, private router: Router) {}\n\n  register(user: any) {\n    return axios.post(`${this.baseUrl}Auth/register`, user);\n  }\n\n  login(email: string,password: string) {\n    \n    this.http.post('https://localhost:7101/api/Auth/login',\n      { email: email, password: password },\n      { responseType: 'text' })\n      .subscribe((response) => {\n        const token = response;\n        if (token) {\n    \n      const decodedToken = this.jwtHelper.decodeToken(token);\n     localStorage.setItem('Authorization', token);\n    localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n          localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n      this.router.navigate(['/todo']);\n}\n\n      },\n      );\n  }\n\n  // login(user: any) {\n  //   return axios.post(`${this.baseUrl}Auth/login`, user)\n  //     .then(response => {\n  //       const token = response.data;\n  //       localStorage.setItem('Authorization', token);\n  //       return true;\n  //     })\n  //    .catch(error => {\n  //     return error.response.data.error;\n  //   });\n  // }\nisAuthenticated(): boolean {\n  const token = localStorage.getItem('Authorization');\n  if (!token) {\n    return false;\n  }\n  const tokenWithoutBearer = token.replace('Bearer ', '');\n  return !this.jwtHelper.isTokenExpired(tokenWithoutBearer);\n}\n\n\n  logout() {\n    localStorage.removeItem('access_token');\n  }\n}\n"]}