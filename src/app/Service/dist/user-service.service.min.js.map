{"version":3,"sources":["user-service.service.ts"],"names":["core_1","require","axios_1","UserService","http","jwtHelper","localStorage","router","this","baseUrl","prototype","register","user","_this","post","then","response","token","data","decodedToken","decodeToken","setItem","navigate","error","login","email","password","responseType","subscribe","isAuthenticated","getItem","tokenWithoutBearer","replace","isTokenExpired","logout","removeItem","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,QAAAD,QAAA,SAQAE,YAAA,WAGE,SAAAA,EAAoBC,EAA0BC,EAAoCC,EAA2CC,GAAzGC,KAAAJ,KAAAA,EAA0BI,KAAAH,UAAAA,EAAoCG,KAAAF,aAAAA,EAA2CE,KAAAD,OAAAA,EAFvHC,KAAAC,QAAU,8BAiElB,OA7DEN,EAAAO,UAAAC,SAAA,SAASC,GAAT,IAAAC,EAAAL,KACA,OAAON,QAAA,QAAMY,KAAQN,KAAKC,QAAO,gBAAiBG,GAC/CG,KAAK,SAAAC,GACJ,IAAMC,EAAQD,EAASE,KACjBC,EAAeN,EAAKR,UAAUe,YAAYH,GAKhD,OAJAX,aAAae,QAAQ,gBAAiBJ,GACtCX,aAAae,QAAQ,OAAQF,EAAa,+DAC1Cb,aAAae,QAAQ,SAAUF,EAAa,yEAC5CN,EAAKN,OAAOe,SAAS,CAAC,WACf,IAEH,MAAC,SAAAC,GACL,OAAOA,EAAMP,SAASE,KAAKK,SAK/BpB,EAAAO,UAAAc,MAAA,SAAMC,EAAcC,GAApB,IAAAb,EAAAL,KAEEA,KAAKJ,KAAKU,KAAK,wCACb,CAAEW,MAAOA,EAAOC,SAAUA,GAC1B,CAAEC,aAAc,SACfC,UAAU,SAACZ,GACV,IAAMC,EAAQD,EACd,GAAIC,EAAO,CAEb,IAAME,EAAeN,EAAKR,UAAUe,YAAYH,GACjDX,aAAae,QAAQ,gBAAiBJ,GACvCX,aAAae,QAAQ,OAAQF,EAAa,+DACpCb,aAAae,QAAQ,SAAUF,EAAa,yEAChDN,EAAKN,OAAOe,SAAS,CAAC,cAkB5BnB,EAAAO,UAAAmB,gBAAA,WACE,IAAMZ,EAAQX,aAAawB,QAAQ,iBACnC,IAAKb,EACH,OAAO,EAET,IAAMc,EAAqBd,EAAMe,QAAQ,UAAW,IACpD,OAAQxB,KAAKH,UAAU4B,eAAeF,IAItC5B,EAAAO,UAAAwB,OAAA,WACE5B,aAAa6B,WAAW,iBAhEfhC,EAAWiC,WAAA,CAHvBpC,OAAAqC,WAAW,CACVC,WAAY,UAEDnC,GAAb,GAAaoC,QAAApC,YAAAA","file":"user-service.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport axios from 'axios';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\nprivate baseUrl = 'https://localhost:7101/api/';\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService,private localStorage: LocalStorageService, private router: Router) {}\n\n  register(user: any) {\n  return axios.post(`${this.baseUrl}Auth/register`, user)\n    .then(response => {\n      const token = response.data;\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      localStorage.setItem('Authorization', token);\n      localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n      localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n      this.router.navigate(['/todo']);\n      return true;\n    })\n    .catch(error => {\n      return error.response.data.error;\n    });\n}\n\n\n  login(email: string,password: string) {\n    \n    this.http.post('https://localhost:7101/api/Auth/login',\n      { email: email, password: password },\n      { responseType: 'text' })\n      .subscribe((response) => {\n        const token = response;\n        if (token) {\n    \n      const decodedToken = this.jwtHelper.decodeToken(token);\n     localStorage.setItem('Authorization', token);\n    localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n          localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n      this.router.navigate(['/todo']);\n}\n\n      },\n      );\n  }\n\n  // login(user: any) {\n  //   return axios.post(`${this.baseUrl}Auth/login`, user)\n  //     .then(response => {\n  //       const token = response.data;\n  //       localStorage.setItem('Authorization', token);\n  //       return true;\n  //     })\n  //    .catch(error => {\n  //     return error.response.data.error;\n  //   });\n  // }\nisAuthenticated(): boolean {\n  const token = localStorage.getItem('Authorization');\n  if (!token) {\n    return false;\n  }\n  const tokenWithoutBearer = token.replace('Bearer ', '');\n  return !this.jwtHelper.isTokenExpired(tokenWithoutBearer);\n}\n\n\n  logout() {\n    localStorage.removeItem('access_token');\n  }\n}\n"]}