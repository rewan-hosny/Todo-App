{"version":3,"sources":["todo.component.ts"],"names":["core_1","require","Todo_1","TodoComponent","todoService","this","todoList","newItem","listTodo","filteredListTodo","isCompleted","id","TodoUpdate","EventEmitter","prototype","ngOnInit","loadTodoList","_this","getMyTodoList","subscribe","result","filter","todo","isComplete","error","console","log","toggleCompleted","addTodoItem","response","Todo","errors","updateTodoItem","updateTodo","createTodo","updateTodomode","item","editMode","__decorate","Input","Output","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,OAAAD,QAAA,cAYAE,cAAA,WAWE,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EAVpBC,KAAAC,SAAkB,GAClBD,KAAAE,QAAe,GACfF,KAAAG,SAAuB,GACvBH,KAAAI,iBAA+B,GAE/BJ,KAAAK,YAA8B,KAC9BL,KAAAM,GAAa,EAEHN,KAAAO,WAAa,IAAIZ,OAAAa,aAgI7B,OA5HEV,EAAAW,UAAAC,SAAA,WACEV,KAAKW,gBAGPb,EAAAW,UAAAE,aAAA,WAAA,IAAAC,EAAAZ,KACEA,KAAKD,YAAYc,cAAcb,KAAKK,aAAaS,UAC/C,SAACC,GACCH,EAAKT,SAAWY,EAChBH,EAAKR,iBAAmBQ,EAAKT,SAASa,OAAO,SAAAC,GAC3C,OAAyB,OAArBL,EAAKP,aAGAY,EAAKC,aAAeN,EAAKP,eAItC,SAACc,GACCC,QAAQC,IAAIF,MAKlBrB,EAAAW,UAAAa,gBAAA,SAAgBjB,GACdL,KAAKK,YAAcA,EACnBL,KAAKW,gBAIPb,EAAAW,UAAAc,YAAA,WAAA,IAAAX,EAAAZ,KACEA,KAAKD,YAAYwB,YAAYvB,KAAKE,SAASY,UACzC,SAACU,GACCJ,QAAQC,IAAIG,GACZZ,EAAKV,QAAU,IAAIL,OAAA4B,KACnBb,EAAKD,gBAEP,SAACQ,GACCC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMA,MAAMO,WAM9B5B,EAAAW,UAAAkB,eAAA,SAAeV,GAAf,IAAAL,EAAAZ,KACEA,KAAKD,YAAY6B,WAAWX,EAAKX,GAAIW,GAAMH,UACzC,WACEM,QAAQC,IAAI,qBAAqBJ,EAAKX,GAAE,0BACxCM,EAAKD,gBAEP,SAACQ,GACCC,QAAQC,IAAI,oCAAoCJ,EAAKX,GAAE,KAAKa,MAwDlErB,EAAAW,UAAAoB,WAAA,WAAA,IAAAjB,EAAAZ,KACEA,KAAKD,YAAYwB,YAAYvB,KAAKE,SAASY,UACzC,SAACU,GACCJ,QAAQC,IAAIG,GACZZ,EAAKV,QAAU,IAAIL,OAAA4B,KACnBb,EAAKD,gBAEP,SAACQ,GACCC,QAAQC,IAAIF,MAMlBrB,EAAAW,UAAAqB,eAAA,SAAeC,GACbA,EAAKC,UAAYD,EAAKC,UA9HfC,WAAA,CAARtC,OAAAuC,6BACSD,WAAA,CAATtC,OAAAwC,oCATUrC,EAAamC,WAAA,CALzBtC,OAAAyC,UAAU,CACTC,SAAU,OACVC,YAAa,wBACbC,UAAW,CAAC,2BAEDzC,GAAb,GAAa0C,QAAA1C,cAAAA","file":"todo.component.min.js","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { EditTodo } from 'src/app/EditTodo';\nimport { TodoService } from 'src/app/Service/Todo/todo.service';\nimport { Todo } from '../../Todo';\nimport { NgModule } from '@angular/core';\n\n\n\n\n\n@Component({\n  selector: 'todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\nexport class TodoComponent implements OnInit {\n  todoList: any[] = [];\n  newItem: any = {};\n  listTodo: EditTodo[] = [];\n  filteredListTodo: EditTodo[] = [];\n\n  isCompleted: boolean | null = null;\n  id: number = 0;\n  @Input() todo?: Todo;\n  @Output() TodoUpdate = new EventEmitter<Todo[]>();\n\n  constructor(private todoService: TodoService) { }\n\n  ngOnInit(): void {\n    this.loadTodoList();\n  }\n\n  loadTodoList() {\n    this.todoService.getMyTodoList(this.isCompleted).subscribe(\n      (result: any) => {\n        this.listTodo = result;\n        this.filteredListTodo = this.listTodo.filter(todo => {\n          if (this.isCompleted === null) {\n            return true; // show all items if isCompleted is null\n          } else {\n            return todo.isComplete === this.isCompleted;\n          }\n        });\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n\n  toggleCompleted(isCompleted: boolean | null) {\n    this.isCompleted = isCompleted;\n    this.loadTodoList();\n  }\n\n\n  addTodoItem(): void {\n    this.todoService.addTodoItem(this.newItem).subscribe(\n      (response: any) => {\n        console.log(response);\n        this.newItem = new Todo();\n        this.loadTodoList();\n      },\n      (error: any) => {\n        console.log(error);\n        console.log(error.error.errors); // add this line to log the specific error messages\n      }\n    );\n  }\n\n\n  updateTodoItem(todo: EditTodo): void {\n    this.todoService.updateTodo(todo.id, todo).subscribe(\n      () => {\n        console.log(`Todo item with ID ${todo.id} updated successfully.`);\n        this.loadTodoList();\n      },\n      (error: any) => {\n        console.log(`Error updating todo item with ID ${todo.id}: ${error}`);\n      }\n    );\n  }\n\n// deleteTodoItem(id: number): void {\n//   this.id = id;\n//   const modal = (<any>$('#ConfirmDeleteComponent'));\n//   modal.modal('show');\n// }\n\n  \n\n  // confirmDelete() {\n  //   this.todoService.DeleteTodo(this.id).subscribe(\n  //     () => {\n  //       console.log(`Todo item with ID ${this.id} deleted successfully.`);\n  //       this.loadTodoList();\n  //     },\n  //     (error: any) => {\n  //       console.log(`Error deleting todo item with ID ${this.id}: ${error}`);\n  //     }\n  //   );\n  // }\n  // openDeleteConfirmationModal(id: number) {\n  //   const modalRef = this.modalService.open(ConfirmDeleteComponent, { centered: true });\n  //   modalRef.componentInstance.delete.subscribe(() => {\n  //     this.todoService.DeleteTodo(id).subscribe(\n  //       () => {\n  //         console.log(`Todo item with ID ${id} deleted successfully.`);\n  //         this.loadTodoList();\n  //       },\n  //       (error: any) => {\n  //         console.log(`Error deleting todo item with ID ${id}: ${error}`);\n  //       }\n  //     );\n  //   });\n  // }\n\n\n\n  // deleteTodoItem(id: number): void {\n  //   if(confirm('Are you sure you want to delete this item?')) {\n  //     this.todoService.DeleteTodo(id).subscribe(\n  //       () => {\n  //         console.log(`Todo item with ID ${id} deleted successfully.`);\n  //         this.loadTodoList();\n  //       },\n  //       (error: any) => {\n  //         console.log(`Error deleting todo item with ID ${id}: ${error}`);\n  //       }\n  //     );\n  //   }\n  // }\n\n\n  createTodo() {\n    this.todoService.addTodoItem(this.newItem).subscribe(\n      (response: any) => {\n        console.log(response);\n        this.newItem = new Todo();\n        this.loadTodoList();\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n\n\n  updateTodomode(item: EditTodo) {\n    item.editMode = !item.editMode;\n  }\n\n}\n\n\n\n\n"]}